name: Reusable Docker Build or Retag

on:
  workflow_call:
    inputs:
      targets:
        description: "Comma-separated list of build targets (e.g., dev,beta,stable)"
        required: true
        type: string
      branch_name:
        description: "Branch name (for dev builds only)"
        required: false
        type: string
      docker_tag_suffix:
        description: "Suffix to append to the Docker tag (e.g., 'pr' for pull requests)"
        required: false
        type: string
      retag:
        description: "Set to true for retagging existing images"
        required: false
        type: boolean

jobs:
  build-or-retag:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target: ${{ fromJson(inputs.targets) }}

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Extract Version and Construct Tag
        id: extract_version_and_tag
        run: |
          capitalize() {
            echo "$1" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}'
          }
          CAPITALIZED_TARGET=$(capitalize "${{ matrix.target }}")
          CONFIG_FILE="Omada ${CAPITALIZED_TARGET}/config.yaml"
          VERSION=$(yq '.version' "${CONFIG_FILE}")

          if [ "${{ matrix.target }}" = "dev" ] && [ -n "${{ inputs.branch_name }}" ]; then
            # Include branch name for dev builds
            SANITIZED_BRANCH=$(echo "${{ inputs.branch_name }}" | tr '/' '-')
            if [ -n "${{ inputs.docker_tag_suffix }}" ]; then
              DOCKER_TAG="${VERSION}-${SANITIZED_BRANCH}-${{ inputs.docker_tag_suffix }}"
            else
              DOCKER_TAG="${VERSION}-${SANITIZED_BRANCH}"
            fi
          else
            # No branch name for beta/stable
            if [ -n "${{ inputs.docker_tag_suffix }}" ]; then
              DOCKER_TAG="${VERSION}-${{ inputs.docker_tag_suffix }}"
            else
              DOCKER_TAG="${VERSION}"
            fi
          fi

          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=${{ secrets.DOCKER_USER_NAME }}/home-assistant-omada" >> $GITHUB_ENV
          echo "DOCKER_TAG=$DOCKER_TAG" >> $GITHUB_ENV

          echo "Config file: $CONFIG_FILE"
          echo "Version: $VERSION"
          echo "Docker Image: $DOCKER_IMAGE"
          echo "Docker Tag: $DOCKER_TAG"

      - name: Check if Final Tag Exists
        if: inputs.retag == true
        id: check_existing_tag
        run: |
          IMAGE="${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:${{ env.VERSION }}"

          echo "Checking if image exists: $IMAGE"
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "Image exists: $IMAGE"
            echo "SKIP_RETAG=true" >> $GITHUB_ENV
          else
            echo "Image does not exist: $IMAGE"
            echo "SKIP_RETAG=false" >> $GITHUB_ENV

      - name: Retag and Push Docker Image
        if: inputs.retag == true && env.SKIP_RETAG == 'false'
        run: |
          FINAL_TAG="${{ env.VERSION }}"
          SOURCE_TAG="${{ env.DOCKER_TAG }}"

          echo "Checking if the source image exists..."
          docker pull "${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:${SOURCE_TAG}"

          echo "Retagging image to final tag: $FINAL_TAG..."
          docker tag "${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:${SOURCE_TAG}" "${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:${FINAL_TAG}"

          echo "Pushing retagged image..."
          docker push "${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:${FINAL_TAG}"

      - name: Build and Push Docker Image
        if: inputs.retag != true
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:${{ env.DOCKER_TAG }}
          platforms: linux/amd64,linux/arm64
          file: ./Omada Dev/Dockerfile
          context: ./Omada Dev
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:cache
          cache-to: type=registry,ref=${{ env.DOCKER_IMAGE }}-${{ matrix.target }}:cache,mode=max
          build-args: |
            INSTALL_VER=${{ env.VERSION }}
