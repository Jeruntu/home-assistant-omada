name: Retag and Push Docker Images for Master

on:
  push:
    branches:
      - master

jobs:
  retag-and-push:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target: [dev]

    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER_NAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Extract version from config.yaml
        id: extract_version
        run: |
          case "${{ matrix.target }}" in
            dev)
              CONFIG_FILE="Omada Dev/config.yaml"
              IMAGE_NAME="${{ secrets.DOCKER_USER_NAME }}/home-assistant-omada-dev"
              ;;
            beta)
              CONFIG_FILE="Omada Beta/config.yaml"
              IMAGE_NAME="${{ secrets.DOCKER_USER_NAME }}/home-assistant-omada-beta"
              ;;
            stable)
              CONFIG_FILE="Omada Stable/config.yaml"
              IMAGE_NAME="${{ secrets.DOCKER_USER_NAME }}/home-assistant-omada-stable"
              ;;
          esac

          # Extract version from config.yaml
          VERSION=$(yq '.version' "${CONFIG_FILE}")

          # Export variables
          echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Check if the image exists
        id: check_image
        run: |
          IMAGE_EXISTS=$(docker manifest inspect ${{ env.IMAGE_NAME }}:${{ env.VERSION }} > /dev/null 2>&1 && echo true || echo false)
          echo "IMAGE_EXISTS=$IMAGE_EXISTS" >> $GITHUB_ENV

      - name: Log Configuration
        run: |
          echo "Target: ${{ matrix.target }}"
          echo "Docker Image: ${{ env.IMAGE_NAME }}"
          echo "Config File: ${{ env.CONFIG_FILE }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Image Exists: ${{ env.IMAGE_EXISTS }}"

      - name: Conditional Retagging
        if: env.IMAGE_EXISTS == 'false'
        run: |
          PR_TAG="${{ env.VERSION }}-pr"
          FINAL_TAG="${{ env.VERSION }}"

          # Pull the PR-tagged image
          docker pull ${{ env.IMAGE_NAME }}:$PR_TAG

          # Retag and push the image without the `-pr` suffix
          docker tag ${{ env.IMAGE_NAME }}:$PR_TAG ${{ env.IMAGE_NAME }}:$FINAL_TAG
          docker push ${{ env.IMAGE_NAME }}:$FINAL_TAG
